1.创建项目

2.创建模型，数据库api
    *数据库配置，在主项目mysite的setting.py中INSTALLED_APP中添加建立的app（polls）
    python manage.py migrate 创建 INSTALLED_APP中的各个项目的数据库表
    *创建模型，在models.py 中设置一个类就是一个表
    *激活模型，每个app和主项目的链接接口是在apps.py 里面，激活模型就是在主项目的setting.py
    的INSTALLED_APP里面添加app.py里面的信息 如 polls.apps.PollsConfig
    python manage.py migrate
    python manage.py makemigrations polls

3.创建视图，使用模板
    *首先在主目录mysite下的urls.py 中添加搜索就是一个path， path('polls/',include('polls.urls')),
    这个作用是浏览器在访问 http://127.0.0.1:8000/polls的时候会跳到polls这个应用的urls.py 里面找
    *在polls.urls.py 里面的path，
    path('<int:question_id>/', views.detail, name='detail'),
    views.detial 是polls里面的views.py 中的detail函数，就是视图
    *在views.py 中的一个视图（函数）
    def detail(request, question_id):
        question = get_object_or_404(Question, pk=question_id)
        return render(request, 'polls/detail.html', {'question': question})

     在这个文件中可以调用模块Question,可以用快捷函数render将模板，容器（传入到模板中的变量，用一个set表示{'question': question}）
     结合后,返回一个HttpResponse
     *调用的模块要在template.polls中找根据 URL 中的参数从数据库中获取数据、载入模板文件然后返回渲染后的模板。 由于这种情况特别常见，Django 提供一种快捷方式，叫做“通用视图”系统。


     *通用视图：

4.后台管理
    *'django.contrib.admin',就是这个django自带应用
    *创建超级用户 python manage.py createsuperuser
    *在应用（polls）的models.py 里面注册 模型（数据库），和操作


5.测试：
    *bug Question.was_published_recently() 方法在 Question 的 pub_date 字段比当前时间还晚时也会返回 True（这是个 Bug）。
    *在应用polls的test.py 里面写测试文件
    *
    *运行测试 python manage.py test polls
        它找到了 django.test.TestCase 的一个子类
        它创建一个特殊的数据库供测试使用
        它在类中寻找测试方法——以 test 开头的方法。
        在 test_was_published_recently_with_future_question 方法中，它创建了一个 pub_date 值为 30 天后的 Question 实例。
        接着使用 assertls() 方法，发现 was_published_recently() 返回了 True，而我们期望它返回 False。
     *针对视图的测试

6.管理文件，网页图片样式
    *polls 目录下创建一个名为 static 的目录。Django 将在该目录下查找静态文件，这种方式和 Diango 在 polls/templates/ 目录下查找 template 的方式类似。

    *Django 的 STATICFILES_FINDERS 设置包含了一系列的查找器，它们知道去哪里找到 static 文件。AppDirectoriesFinder 是默认查找器中的一个，它会在每个 INSTALLED_APPS 中指定的应用的子文件中寻找名称为 static 的特定文件夹，就像我们在 polls 中刚创建的那个一样。管理后台采用相同的目录结构管理它的静态文件。

    *添加样式表,图片
7.自定义后台表单，在admin.py
class ChoiceInline(admin.TabularInline):
    model = Choice
    extra = 3

#实现字段的分组
class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]
    inlines = [ChoiceInline]
    #显示字段格式
    list_display = ('question_text', 'pub_date', 'was_published_recently')
    #过滤器，在后台添加一个过滤器，过滤的字段是pub_date
    list_filter = ['pub_date']
    #在列表的顶部添加一个搜索框，输入待搜项时，Django 将搜索 question_text 字段
    search_fields = ['question_text']

8.自定义工程模板:https://docs.djangoproject.com/zh-hans/2.0/topics/templates/#template-loading
*你的工程目录（指包含 manage.py 的那个文件夹）内创建一个名为 templates 的目录
*打开你的设置文件（mysite/settings.py，牢记），在 TEMPLATES 设置中添加 DIR，'DIRS':[]-->'DIRS': [os.path.join(BASE_DIR, 'templates')],
*将存放 Django 默认模板的目录（django/contrib/admin/templates）内的模板文件 admin/base_site.html 复制到这个目录内
*DIRS 默认是空的，Django 是怎么找到默认的后台模板的？因为 APP_DIRS 被置为 True，Django 会自动在每个应用包内递归查找 templates/ 子目录（不要忘了 django.contrib.admin 也是一个应用）。

9.打包应用，一个应用于主应用的链接就是setting.py 里面的INSTALLED_APP和urls.py 里面的链接


